// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.courses.web;

import com.malsolo.courses.domain.Course;
import com.malsolo.courses.domain.Professor;
import com.malsolo.courses.repository.CourseRepository;
import com.malsolo.courses.repository.ProfessorRepository;
import com.malsolo.courses.web.ApplicationConversionServiceFactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    @Autowired
    CourseRepository ApplicationConversionServiceFactoryBean.courseRepository;
    
    @Autowired
    ProfessorRepository ApplicationConversionServiceFactoryBean.professorRepository;
    
    public Converter<Course, String> ApplicationConversionServiceFactoryBean.getCourseToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.malsolo.courses.domain.Course, java.lang.String>() {
            public String convert(Course course) {
                return new StringBuilder().append(course.getTitle()).append(' ').append(course.getStatus()).append(' ').append(course.getHours()).toString();
            }
        };
    }
    
    public Converter<Long, Course> ApplicationConversionServiceFactoryBean.getIdToCourseConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.malsolo.courses.domain.Course>() {
            public com.malsolo.courses.domain.Course convert(java.lang.Long id) {
                return courseRepository.findOne(id);
            }
        };
    }
    
    public Converter<String, Course> ApplicationConversionServiceFactoryBean.getStringToCourseConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.malsolo.courses.domain.Course>() {
            public com.malsolo.courses.domain.Course convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Course.class);
            }
        };
    }
    
    public Converter<Professor, String> ApplicationConversionServiceFactoryBean.getProfessorToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.malsolo.courses.domain.Professor, java.lang.String>() {
            public String convert(Professor professor) {
                return new StringBuilder().append(professor.getName()).append(' ').append(professor.getLastName()).append(' ').append(professor.getSecondLastName()).toString();
            }
        };
    }
    
    public Converter<Long, Professor> ApplicationConversionServiceFactoryBean.getIdToProfessorConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.malsolo.courses.domain.Professor>() {
            public com.malsolo.courses.domain.Professor convert(java.lang.Long id) {
                return professorRepository.findOne(id);
            }
        };
    }
    
    public Converter<String, Professor> ApplicationConversionServiceFactoryBean.getStringToProfessorConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.malsolo.courses.domain.Professor>() {
            public com.malsolo.courses.domain.Professor convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Professor.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getCourseToStringConverter());
        registry.addConverter(getIdToCourseConverter());
        registry.addConverter(getStringToCourseConverter());
        registry.addConverter(getProfessorToStringConverter());
        registry.addConverter(getIdToProfessorConverter());
        registry.addConverter(getStringToProfessorConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
