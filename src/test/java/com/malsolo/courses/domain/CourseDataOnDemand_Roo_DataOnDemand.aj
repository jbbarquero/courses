// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.courses.domain;

import com.malsolo.courses.domain.Course;
import com.malsolo.courses.domain.CourseDataOnDemand;
import com.malsolo.courses.domain.Professor;
import com.malsolo.courses.domain.ProfessorDataOnDemand;
import com.malsolo.courses.repository.CourseRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CourseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CourseDataOnDemand: @Component;
    
    private Random CourseDataOnDemand.rnd = new SecureRandom();
    
    private List<Course> CourseDataOnDemand.data;
    
    @Autowired
    ProfessorDataOnDemand CourseDataOnDemand.professorDataOnDemand;
    
    @Autowired
    CourseRepository CourseDataOnDemand.courseRepository;
    
    public Course CourseDataOnDemand.getNewTransientCourse(int index) {
        Course obj = new Course();
        setActive(obj, index);
        setHours(obj, index);
        setProfessor(obj, index);
        setStatus(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void CourseDataOnDemand.setActive(Course obj, int index) {
        Boolean active = Boolean.TRUE;
        obj.setActive(active);
    }
    
    public void CourseDataOnDemand.setHours(Course obj, int index) {
        int hours = index;
        obj.setHours(hours);
    }
    
    public void CourseDataOnDemand.setProfessor(Course obj, int index) {
        Professor professor = professorDataOnDemand.getRandomProfessor();
        obj.setProfessor(professor);
    }
    
    public void CourseDataOnDemand.setStatus(Course obj, int index) {
        Long status = new Integer(index).longValue();
        obj.setStatus(status);
    }
    
    public void CourseDataOnDemand.setTitle(Course obj, int index) {
        String title = "title_" + index;
        if (title.length() > 100) {
            title = title.substring(0, 100);
        }
        obj.setTitle(title);
    }
    
    public Course CourseDataOnDemand.getSpecificCourse(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Course obj = data.get(index);
        Long id = obj.getId();
        return courseRepository.findOne(id);
    }
    
    public Course CourseDataOnDemand.getRandomCourse() {
        init();
        Course obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return courseRepository.findOne(id);
    }
    
    public boolean CourseDataOnDemand.modifyCourse(Course obj) {
        return false;
    }
    
    public void CourseDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = courseRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Course' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Course>();
        for (int i = 0; i < 10; i++) {
            Course obj = getNewTransientCourse(i);
            try {
                courseRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            courseRepository.flush();
            data.add(obj);
        }
    }
    
}
